ggplot(data, aes(x = Time, y = Series, color = Trajectory)) +
geom_line() +
theme_minimal() +
labs(title = "Trois trajectoires du processus X_t",
x = "Temps",
y = "Valeur de la série",
color = "Trajectoire")
library(ggplot2)
set.seed(123)  # Pour la reproductibilité
n <- 200  # Taille des trajectoires
t <- 1:n  # Temps
# Fonction pour générer une trajectoire du processus
generate_trajectory <- function(n) {
epsilon <- rnorm(n, mean = 0, sd = 1)  # Bruit blanc
X <- numeric(n)
X[1] <- sin(1) + epsilon[1]
for (i in 2:n) {
X[i] <- sin(i) + epsilon[i] - 0.2 * epsilon[i - 1]
}
return(X)
}
# Générer trois trajectoires
X1 <- generate_trajectory(n)
X2 <- generate_trajectory(n)
X3 <- generate_trajectory(n)
# Création d'un data.frame pour ggplot
data <- data.frame(Time = rep(t, 3),
Series = c(X1, X2, X3),
Trajectory = factor(rep(1:3, each = n)))
# Tracer les trois trajectoires
ggplot(data, aes(x = Time, y = Series, color = Trajectory)) +
geom_line() +
theme_minimal() +
labs(title = "Trois trajectoires du processus X_t",
x = "Temps",
y = "Valeur de la série",
color = "Trajectoire")
n <- 200  # Taille des trajectoires
# Fonction pour générer une trajectoire du processus
generate_trajectory <- function(n) {
epsilon <- rnorm(n)  # Générer le bruit blanc
X <- rep(0, n)
for (t in 2:n) {
X[t] <- sin(t) + epsilon[t] - 0.2 * epsilon[t - 1]
}
return(X)
}
# Générer trois trajectoires
X1 <- generate_trajectory(n)
X2 <- generate_trajectory(n)
X3 <- generate_trajectory(n)
# Tracer les trajectoires
plot(X1, type = "l", col = "red", ylim = range(c(X1, X2, X3)), ylab = "X_t", xlab = "t")
lines(X2, col = "blue")
lines(X3, col = "green")
n <- 200  # Taille des trajectoires
# Fonction pour générer une trajectoire du processus
generate_trajectory <- function(n) {
epsilon <- rnorm(n)  # Générer le bruit blanc
X <- rep(0, n)
for (t in 2:n) {
X[t] <- sin(t) + epsilon[t] - 0.2 * epsilon[t - 1]
}
return(X)
}
# Générer trois trajectoires
X1 <- generate_trajectory(n)
X2 <- generate_trajectory(n)
X3 <- generate_trajectory(n)
# Tracer les trajectoires
plot(X1, type = "l", col = "black", ylim = range(c(X1, X2, X3)), ylab = "X_t", xlab = "t")
lines(X2, col = "black")
lines(X3, col = "black")
set.seed(123)
n <- 200  # Taille des trajectoires
# Fonction pour générer une trajectoire du processus
trajectoire_a <- function(n) {
epsilon <- rnorm(n)  # Générer le bruit blanc
X <- rep(0, n)
for (t in 2:n) {
X[t] <- sin(t) + epsilon[t] - 0.2 * epsilon[t - 1]
}
return(X)
}
# Générer trois trajectoires
X1 <- trajectoire_a(n)
X2 <- trajectoire_a(n)
X3 <- trajectoire_a(n)
# Tracer les trajectoires
plot(X1, type = "l", col = "black", ylim = range(c(X1, X2, X3)), ylab = "X_t", xlab = "t")
lines(X2, col = "black")
lines(X3, col = "black")
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
trajectory_1 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
trajectory_2 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
trajectory_3 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
# Afficher les trajectoires
plot(trajectory_1, type="l", col="blue", ylim=c(min(trajectory_1, trajectory_2, trajectory_3), max(trajectory_1, trajectory_2, trajectory_3)), main="Trajectoires MA(1)")
lines(trajectory_2, col="red")
lines(trajectory_3, col="green")
set.seed(123)
trajectory_1 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
trajectory_2 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
trajectory_3 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
# Afficher les trajectoires
plot(trajectory_1, type="l", col="black", ylim=c(min(trajectory_1, trajectory_2, trajectory_3), max(trajectory_1, trajectory_2, trajectory_3)), main="Trajectoires MA(1)")
lines(trajectory_2, col="lightgreen")
lines(trajectory_3, col="lightblue")
set.seed(123)
b1 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
b2 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
b3 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
plot(trajectory_1, type="l", col="black", main="Trajectoires MA(1)")
lines(trajectory_2, col="lightgreen")
lines(trajectory_3, col="lightblue")
set.seed(123)
b1 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
b2 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
b3 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
plot(trajectory_1, type="l", col="black", main="Trajectoires MA(1)", xlab = "Temps", ylab = "Valeurs")
lines(trajectory_2, col="lightgreen")
lines(trajectory_3, col="lightblue")
set.seed(123)
b1 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
b2 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
b3 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
plot(trajectory_1, type="l", col="purple", main="Trajectoires MA(1)", xlab = "Temps", ylab = "Valeurs")
lines(trajectory_2, col="limegreen")
lines(trajectory_3, col="orange")
set.seed(123)
b1 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
b2 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
b3 <- arima.sim(model = list(ma = -1), n = 200, sd = 1)
plot(trajectory_1, type="l", col="black", main="Trajectoires MA(1)", xlab = "Temps", ylab = "Valeurs")
lines(trajectory_2, col="limegreen")
lines(trajectory_3, col="lightblue")
# Installation et chargement du package
install.packages("forecast")
library(forecast)
# Simulation de la série temporelle
set.seed(123)  # Pour la reproductibilité
n <- 1000  # Taille de l'échantillon
epsilon <- rnorm(n)  # Bruit blanc
X <- rep(0, n)
X[1] <- 1  # Valeur initiale de X_0
X[2] <- 2  # Valeur initiale de X_1
for (t in 3:n) {
X[t] <- 2 * X[t-1] - X[t-2] + epsilon[t]
}
# Utilisation de auto.arima
model <- auto.arima(X)
print(model)
plot(x)
x
plot(X)
gc()
set.seed(123) # Pour la reproductibilité
n <- 100 # Nombre de termes à générer
sigma <- 1 # Variance du bruit blanc
epsilon <- rnorm(n, mean = 0, sd = sqrt(sigma)) # Générer le bruit blanc
X <- rep(0, n) # Initialiser X avec des zéros
X[1] <- rnorm(1, mean = 0, sd = sqrt(sigma)) # Condition initiale pour X[1]
X[2] <- rnorm(1, mean = 0, sd = sqrt(sigma)) # Condition initiale pour X[2]
for(t in 3:n){
X[t] <- 2*X[t-1] - X[t-2] + epsilon[t]
}
# Tracer le processus
plot(X, type = "l", col = "blue", main = "Processus Non Différencié")
Delta2_X <- diff(diff(X)) # Différencier le processus d'ordre 2
# Tracer le processus différencié
plot(Delta2_X, type = "l", col = "red", main = "Processus Différencié d'Ordre 2")
Delta2_X <- diff(X) # Différencier le processus d'ordre 2
# Tracer le processus différencié
plot(Delta2_X, type = "l", col = "red", main = "Processus Différencié d'Ordre 2")
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
n <- 200
arima_process <- arima.sim(n = n, model = list(order = c(2, 2, 0), ar = c(2, -1)))
set.seed(123)
n <- 200
arima_process <- arima.sim(n = n, model = list(order = c(2, 2, 0), ar = c(-2, 1)))
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(0, 2, 0)))
# Tracer le processus simulé
plot(arima_process, type = "l", col = "black", main = "Trajectoire ARIMA(0,2,0)", xlab = "Temps", ylab = "Valeurs")
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(1, 2, 0)))
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(0, 2, 0)))
# Tracer le processus simulé
plot(arima_process, type = "l", col = "black", main = "Trajectoire ARIMA(0,2,0)", xlab = "Temps", ylab = "Valeurs")
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(2, 2, 0)))
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(1, 2, 0)))
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(-2, 2, 0)))
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(-2, 0, 0)))
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(-0.5, 0, 0)))
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(0, 0, 0)))
# Tracer le processus simulé
plot(arima_process, type = "l", col = "black", main = "Trajectoire ARIMA(0,2,0)", xlab = "Temps", ylab = "Valeurs")
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(0, 2, 0)))
# Tracer le processus simulé
plot(arima_process, type = "l", col = "black", main = "Trajectoire ARIMA(0,2,0)", xlab = "Temps", ylab = "Valeurs")
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(0, 5, 0)))
# Tracer le processus simulé
plot(arima_process, type = "l", col = "black", main = "Trajectoire ARIMA(0,2,0)", xlab = "Temps", ylab = "Valeurs")
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(0, -1, 0)))
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(0,2,0)
arima_process <- arima.sim(n = n, model = list(order = c(2, 2, 0), ar=c(-1)))
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
# Simuler un processus ARIMA(2,0,0) avec des coefficients AR ajustés
ts <- arima.sim(n = n, model = list(order = c(2, 0, 0), ar = c(0.5, -0.25)), sd = 1)
# Tracer le processus simulé
plot(ts, main = "Trajectoire ARIMA(2,0,0) ajustée", xlab = "Temps", ylab = "Valeurs")
# Afficher l'autocorrélation
acf(ts)
``
set.seed(123)  # Pour la reproductibilité des résultats
n <- 200  # Nombre de points à simuler
sigma <- 1  # Écart-type du bruit blanc
# Initialiser les valeurs de départ
X <- numeric(n)
X[1] <- rnorm(1, mean = 0, sd = sigma)  # Valeur initiale arbitraire
X[2] <- rnorm(1, mean = 0, sd = sigma)  # Seconde valeur initiale
# Générer le processus différencié d'ordre 2
for (t in 3:n) {
epsilon_t <- rnorm(1, mean = 0, sd = sigma)  # Bruit blanc
X[t] <- 2 * X[t-1] - X[t-2] + epsilon_t
}
# Tracer le processus simulé
plot(X, type = "l", col = "blue", main = "Processus différencié d'ordre 2", xlab = "Temps", ylab = "Valeurs")
# Set the seed for reproducibility
set.seed(0)
# Parameters
omega <- pi / 40
n <- 100000 # Number of points to simulate
# Simulate A and B from a normal distribution
A <- rnorm(n, mean = 100, sd = 1)
B <- rnorm(n, mean = 0, sd = 1)
# Time points
t <- seq(0, 2 * pi, length.out = n)
# Simulate the process
X_t <- A * cos(omega * t) + B * sin(omega * t)
# Plot the process
plot(t, X_t, type = "l", main = "Simulation of the Process X_t = A cos(ωt) + B sin(ωt)",
xlab = "Time t", ylab = "X_t", col = "blue")
# Set the seed for reproducibility
set.seed(0)
# Parameters
omega <- pi / 40
n <- 200 # Number of points to simulate
# Simulate A and B from a normal distribution
A <- rnorm(n, mean = 100, sd = 1)
B <- rnorm(n, mean = 0, sd = 1)
# Time points
t <- seq(0, 2 * pi, length.out = n)
# Simulate the process
X_t <- A * cos(omega * t) + B * sin(omega * t)
# Plot the process
plot(t, X_t, type = "l", main = "Simulation of the Process X_t = A cos(ωt) + B sin(ωt)",
xlab = "Time t", ylab = "X_t", col = "blue")
# Set the seed for reproducibility
set.seed(0)
# Parameters
omega <- pi / 40
n <- 200 # Number of points to simulate
# Simulate A and B from a normal distribution
A <- rnorm(n, mean = 100, sd = 1)
B <- rnorm(n, mean = 0, sd = 1)
# Time points
t <- seq(0, 20 * pi, length.out = n)
# Simulate the process
X_t <- A * cos(omega * t) + B * sin(omega * t)
# Plot the process
plot(t, X_t, type = "l", main = "Simulation of the Process X_t = A cos(ωt) + B sin(ωt)",
xlab = "Time t", ylab = "X_t", col = "blue")
# Set the seed for reproducibility
set.seed(0)
# Parameters
omega <- pi / 40
n <- 200 # Number of points to simulate
# Simulate A and B from a normal distribution
A <- rnorm(n, mean = 100, sd = 1)
B <- rnorm(n, mean = 0, sd = 1)
# Time points
t <- seq(0, 2000 * pi, length.out = n)
# Simulate the process
X_t <- A * cos(omega * t) + B * sin(omega * t)
# Plot the process
plot(t, X_t, type = "l", main = "Simulation of the Process X_t = A cos(ωt) + B sin(ωt)",
xlab = "Time t", ylab = "X_t", col = "blue")
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
n <- 200
omega <- pi/40
A <- rnorm(n, 50000)
B <- rnorm(n, 50000)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/40
A <- rnorm(n, mean = 50000)
B <- rnorm(n, 50000)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/40
A <- rnorm(n, sd = 50000)
B <- rnorm(n, 50000)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/4000
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/400
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/400
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/800
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/1000
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/4000
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/40000
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/4000
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/5000
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
set.seed(123)
n <- 200
omega <- pi/2000
A <- rnorm(n)
B <- rnorm(n)
t <- 1:n
trajectoires <- matrix(0, nrow = n, ncol = 3)
for (i in 1:3) {
trajectoires[, i] <- A[i] * cos(omega * t) + B[i] * sin(omega * t)
}
plot(t, trajectoires[, 1], type = 'l', col = 'black', ylim = range(trajectoires),
xlab = 'Time', ylab = 'X_t', main = 'Trajectoires pour ω = pi/40')
lines(t, trajectoires[, 2], col = 'limegreen')
lines(t, trajectoires[, 3], col = 'lightblue')
22/7
setwd("D:/Documents/GitHub/House-Prices")
